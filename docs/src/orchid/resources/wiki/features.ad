---
title: Features
---

== Features

-  mirroring tasks: provides a list of tasks in the system including all task attributes provided by Camunda BPM Engine

-  reacts on all task life cycle events fired by the process engine

-  high performance queries: creates of read-optimized projections including task-, process- and business data

-  centralized task list: running several Camunda BPM Engines in several applications
   is standard for larger companies. From the user's perspective, it is not feasible
   to login to several task lists and check for relevant user tasks. The demand for the
   centralized task list arises and can be addressed by `camunda-bpm-taskpool`
   if the tasks from several process engines are collected and transmitted over the network.

-  data enrichment: all use cases in which the data is not stored in the process result
   in a cascade of queries executed after the task fetch. The task itself has only the
   information of the `executionId`, so you have to query the `RuntimeService`
   for the execution, load some variables from it and query external systems for further values.
   Another approach is presented in the post from Jan Galinski link:https://blog.holisticon.de/2017/08/prozess-und-business-daten-hand-in-hand-mit-camunda-und-jpa/[Process business data with JPA],
   but still results in a query on the task fetch. In contrast to that,
   the usage of the `camunda-bpm-taskpool` with a data enrichment plugin mechanism
   (allowing to plug-in some data enricher on task creation) would allow for caching the additional
   business data along with the task information, instead of querying it during task fetch.

